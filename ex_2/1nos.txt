{'y': 120, 'x': 1}

("<y := 1 ; while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'x': 5}> --> {'y': 120, 'x': 1}\n[comp]", (("<y := 1, {'x': 5}> --> {'y': 1, 'x': 5}\n[ass]", ()), ("<while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'y': 1, 'x': 5}> --> {'y': 120, 'x': 1}\n[while_tt]", (("<y := Times(y, x) ; x := Minus(x, 1), {'y': 1, 'x': 5}> --> {'y': 5, 'x': 4}\n[comp]", (("<y := Times(y, x), {'y': 1, 'x': 5}> --> {'y': 5, 'x': 5}\n[ass]", ()), ("<x := Minus(x, 1), {'y': 5, 'x': 5}> --> {'y': 5, 'x': 4}\n[ass]", ()))), ("<while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'y': 5, 'x': 4}> --> {'y': 120, 'x': 1}\n[while_tt]", (("<y := Times(y, x) ; x := Minus(x, 1), {'y': 5, 'x': 4}> --> {'y': 20, 'x': 3}\n[comp]", (("<y := Times(y, x), {'y': 5, 'x': 4}> --> {'y': 20, 'x': 4}\n[ass]", ()), ("<x := Minus(x, 1), {'y': 20, 'x': 4}> --> {'y': 20, 'x': 3}\n[ass]", ()))), ("<while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'y': 20, 'x': 3}> --> {'y': 120, 'x': 1}\n[while_tt]", (("<y := Times(y, x) ; x := Minus(x, 1), {'y': 20, 'x': 3}> --> {'y': 60, 'x': 2}\n[comp]", (("<y := Times(y, x), {'y': 20, 'x': 3}> --> {'y': 60, 'x': 3}\n[ass]", ()), ("<x := Minus(x, 1), {'y': 60, 'x': 3}> --> {'y': 60, 'x': 2}\n[ass]", ()))), ("<while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'y': 60, 'x': 2}> --> {'y': 120, 'x': 1}\n[while_tt]", (("<y := Times(y, x) ; x := Minus(x, 1), {'y': 60, 'x': 2}> --> {'y': 120, 'x': 1}\n[comp]", (("<y := Times(y, x), {'y': 60, 'x': 2}> --> {'y': 120, 'x': 2}\n[ass]", ()), ("<x := Minus(x, 1), {'y': 120, 'x': 2}> --> {'y': 120, 'x': 1}\n[ass]", ()))), ("<while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'y': 120, 'x': 1}> --> {'y': 120, 'x': 1}\n[while_ff]", ())))))))))))

Graphviz not available, the tree in dot format is (you can render online at http://www.webgraphviz.com):

digraph G {
    0 [label="<y := 1 ; while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'x': 5}> --> {'y': 120, 'x': 1}\n[comp]"];
    1 [label="<y := 1, {'x': 5}> --> {'y': 1, 'x': 5}\n[ass]"];
    2 [label="<while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'y': 1, 'x': 5}> --> {'y': 120, 'x': 1}\n[while_tt]"];
    3 [label="<y := Times(y, x) ; x := Minus(x, 1), {'y': 1, 'x': 5}> --> {'y': 5, 'x': 4}\n[comp]"];
    4 [label="<y := Times(y, x), {'y': 1, 'x': 5}> --> {'y': 5, 'x': 5}\n[ass]"];
    5 [label="<x := Minus(x, 1), {'y': 5, 'x': 5}> --> {'y': 5, 'x': 4}\n[ass]"];
    6 [label="<while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'y': 5, 'x': 4}> --> {'y': 120, 'x': 1}\n[while_tt]"];
    7 [label="<y := Times(y, x) ; x := Minus(x, 1), {'y': 5, 'x': 4}> --> {'y': 20, 'x': 3}\n[comp]"];
    8 [label="<y := Times(y, x), {'y': 5, 'x': 4}> --> {'y': 20, 'x': 4}\n[ass]"];
    9 [label="<x := Minus(x, 1), {'y': 20, 'x': 4}> --> {'y': 20, 'x': 3}\n[ass]"];
    10 [label="<while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'y': 20, 'x': 3}> --> {'y': 120, 'x': 1}\n[while_tt]"];
    11 [label="<y := Times(y, x) ; x := Minus(x, 1), {'y': 20, 'x': 3}> --> {'y': 60, 'x': 2}\n[comp]"];
    12 [label="<y := Times(y, x), {'y': 20, 'x': 3}> --> {'y': 60, 'x': 3}\n[ass]"];
    13 [label="<x := Minus(x, 1), {'y': 60, 'x': 3}> --> {'y': 60, 'x': 2}\n[ass]"];
    14 [label="<while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'y': 60, 'x': 2}> --> {'y': 120, 'x': 1}\n[while_tt]"];
    15 [label="<y := Times(y, x) ; x := Minus(x, 1), {'y': 60, 'x': 2}> --> {'y': 120, 'x': 1}\n[comp]"];
    16 [label="<y := Times(y, x), {'y': 60, 'x': 2}> --> {'y': 120, 'x': 2}\n[ass]"];
    17 [label="<x := Minus(x, 1), {'y': 120, 'x': 2}> --> {'y': 120, 'x': 1}\n[ass]"];
    18 [label="<while (Not(Eq(x, 1))) do (y := Times(y, x) ; x := Minus(x, 1)), {'y': 120, 'x': 1}> --> {'y': 120, 'x': 1}\n[while_ff]"];

    3 -> 4;
    3 -> 5;
    7 -> 8;
    7 -> 9;
    11 -> 12;
    11 -> 13;
    15 -> 16;
    15 -> 17;
    14 -> 15;
    14 -> 18;
    10 -> 11;
    10 -> 14;
    6 -> 7;
    6 -> 10;
    2 -> 3;
    2 -> 6;
    0 -> 1;
    0 -> 2;
}

{'a': 2688, 'c': 1848, 'b': 0}

("<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 84, 'c': 0, 'b': 22}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_tt]", (("<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 84, 'c': 0, 'b': 22}> --> {'a': 168, 'c': 0, 'b': 11}\n[comp]", (("<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip), {'a': 84, 'c': 0, 'b': 22}> --> {'a': 84, 'c': 0, 'b': 22}\n[if_ff]", (("<skip, {'a': 84, 'c': 0, 'b': 22}> --> {'a': 84, 'c': 0, 'b': 22}\n[skip]", ()),)), ("<a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 84, 'c': 0, 'b': 22}> --> {'a': 168, 'c': 0, 'b': 11}\n[comp]", (("<a := BitShiftLeft(a, 1), {'a': 84, 'c': 0, 'b': 22}> --> {'a': 168, 'c': 0, 'b': 22}\n[ass]", ()), ("<b := BitShiftRight(b, 1), {'a': 168, 'c': 0, 'b': 22}> --> {'a': 168, 'c': 0, 'b': 11}\n[ass]", ()))))), ("<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 168, 'c': 0, 'b': 11}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_tt]", (("<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 168, 'c': 0, 'b': 11}> --> {'a': 336, 'c': 168, 'b': 5}\n[comp]", (("<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip), {'a': 168, 'c': 0, 'b': 11}> --> {'a': 168, 'c': 168, 'b': 11}\n[if_tt]", (("<c := Plus(c, a), {'a': 168, 'c': 0, 'b': 11}> --> {'a': 168, 'c': 168, 'b': 11}\n[ass]", ()),)), ("<a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 168, 'c': 168, 'b': 11}> --> {'a': 336, 'c': 168, 'b': 5}\n[comp]", (("<a := BitShiftLeft(a, 1), {'a': 168, 'c': 168, 'b': 11}> --> {'a': 336, 'c': 168, 'b': 11}\n[ass]", ()), ("<b := BitShiftRight(b, 1), {'a': 336, 'c': 168, 'b': 11}> --> {'a': 336, 'c': 168, 'b': 5}\n[ass]", ()))))), ("<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 336, 'c': 168, 'b': 5}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_tt]", (("<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 336, 'c': 168, 'b': 5}> --> {'a': 672, 'c': 504, 'b': 2}\n[comp]", (("<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip), {'a': 336, 'c': 168, 'b': 5}> --> {'a': 336, 'c': 504, 'b': 5}\n[if_tt]", (("<c := Plus(c, a), {'a': 336, 'c': 168, 'b': 5}> --> {'a': 336, 'c': 504, 'b': 5}\n[ass]", ()),)), ("<a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 336, 'c': 504, 'b': 5}> --> {'a': 672, 'c': 504, 'b': 2}\n[comp]", (("<a := BitShiftLeft(a, 1), {'a': 336, 'c': 504, 'b': 5}> --> {'a': 672, 'c': 504, 'b': 5}\n[ass]", ()), ("<b := BitShiftRight(b, 1), {'a': 672, 'c': 504, 'b': 5}> --> {'a': 672, 'c': 504, 'b': 2}\n[ass]", ()))))), ("<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 672, 'c': 504, 'b': 2}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_tt]", (("<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 672, 'c': 504, 'b': 2}> --> {'a': 1344, 'c': 504, 'b': 1}\n[comp]", (("<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip), {'a': 672, 'c': 504, 'b': 2}> --> {'a': 672, 'c': 504, 'b': 2}\n[if_ff]", (("<skip, {'a': 672, 'c': 504, 'b': 2}> --> {'a': 672, 'c': 504, 'b': 2}\n[skip]", ()),)), ("<a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 672, 'c': 504, 'b': 2}> --> {'a': 1344, 'c': 504, 'b': 1}\n[comp]", (("<a := BitShiftLeft(a, 1), {'a': 672, 'c': 504, 'b': 2}> --> {'a': 1344, 'c': 504, 'b': 2}\n[ass]", ()), ("<b := BitShiftRight(b, 1), {'a': 1344, 'c': 504, 'b': 2}> --> {'a': 1344, 'c': 504, 'b': 1}\n[ass]", ()))))), ("<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 1344, 'c': 504, 'b': 1}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_tt]", (("<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 1344, 'c': 504, 'b': 1}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[comp]", (("<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip), {'a': 1344, 'c': 504, 'b': 1}> --> {'a': 1344, 'c': 1848, 'b': 1}\n[if_tt]", (("<c := Plus(c, a), {'a': 1344, 'c': 504, 'b': 1}> --> {'a': 1344, 'c': 1848, 'b': 1}\n[ass]", ()),)), ("<a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 1344, 'c': 1848, 'b': 1}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[comp]", (("<a := BitShiftLeft(a, 1), {'a': 1344, 'c': 1848, 'b': 1}> --> {'a': 2688, 'c': 1848, 'b': 1}\n[ass]", ()), ("<b := BitShiftRight(b, 1), {'a': 2688, 'c': 1848, 'b': 1}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[ass]", ()))))), ("<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 2688, 'c': 1848, 'b': 0}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_ff]", ())))))))))))

Graphviz not available, the tree in dot format is (you can render online at http://www.webgraphviz.com):

digraph G {
    0 [label="<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 84, 'c': 0, 'b': 22}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_tt]"];
    1 [label="<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 84, 'c': 0, 'b': 22}> --> {'a': 168, 'c': 0, 'b': 11}\n[comp]"];
    2 [label="<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip), {'a': 84, 'c': 0, 'b': 22}> --> {'a': 84, 'c': 0, 'b': 22}\n[if_ff]"];
    3 [label="<skip, {'a': 84, 'c': 0, 'b': 22}> --> {'a': 84, 'c': 0, 'b': 22}\n[skip]"];
    4 [label="<a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 84, 'c': 0, 'b': 22}> --> {'a': 168, 'c': 0, 'b': 11}\n[comp]"];
    5 [label="<a := BitShiftLeft(a, 1), {'a': 84, 'c': 0, 'b': 22}> --> {'a': 168, 'c': 0, 'b': 22}\n[ass]"];
    6 [label="<b := BitShiftRight(b, 1), {'a': 168, 'c': 0, 'b': 22}> --> {'a': 168, 'c': 0, 'b': 11}\n[ass]"];
    7 [label="<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 168, 'c': 0, 'b': 11}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_tt]"];
    8 [label="<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 168, 'c': 0, 'b': 11}> --> {'a': 336, 'c': 168, 'b': 5}\n[comp]"];
    9 [label="<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip), {'a': 168, 'c': 0, 'b': 11}> --> {'a': 168, 'c': 168, 'b': 11}\n[if_tt]"];
    10 [label="<c := Plus(c, a), {'a': 168, 'c': 0, 'b': 11}> --> {'a': 168, 'c': 168, 'b': 11}\n[ass]"];
    11 [label="<a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 168, 'c': 168, 'b': 11}> --> {'a': 336, 'c': 168, 'b': 5}\n[comp]"];
    12 [label="<a := BitShiftLeft(a, 1), {'a': 168, 'c': 168, 'b': 11}> --> {'a': 336, 'c': 168, 'b': 11}\n[ass]"];
    13 [label="<b := BitShiftRight(b, 1), {'a': 336, 'c': 168, 'b': 11}> --> {'a': 336, 'c': 168, 'b': 5}\n[ass]"];
    14 [label="<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 336, 'c': 168, 'b': 5}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_tt]"];
    15 [label="<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 336, 'c': 168, 'b': 5}> --> {'a': 672, 'c': 504, 'b': 2}\n[comp]"];
    16 [label="<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip), {'a': 336, 'c': 168, 'b': 5}> --> {'a': 336, 'c': 504, 'b': 5}\n[if_tt]"];
    17 [label="<c := Plus(c, a), {'a': 336, 'c': 168, 'b': 5}> --> {'a': 336, 'c': 504, 'b': 5}\n[ass]"];
    18 [label="<a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 336, 'c': 504, 'b': 5}> --> {'a': 672, 'c': 504, 'b': 2}\n[comp]"];
    19 [label="<a := BitShiftLeft(a, 1), {'a': 336, 'c': 504, 'b': 5}> --> {'a': 672, 'c': 504, 'b': 5}\n[ass]"];
    20 [label="<b := BitShiftRight(b, 1), {'a': 672, 'c': 504, 'b': 5}> --> {'a': 672, 'c': 504, 'b': 2}\n[ass]"];
    21 [label="<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 672, 'c': 504, 'b': 2}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_tt]"];
    22 [label="<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 672, 'c': 504, 'b': 2}> --> {'a': 1344, 'c': 504, 'b': 1}\n[comp]"];
    23 [label="<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip), {'a': 672, 'c': 504, 'b': 2}> --> {'a': 672, 'c': 504, 'b': 2}\n[if_ff]"];
    24 [label="<skip, {'a': 672, 'c': 504, 'b': 2}> --> {'a': 672, 'c': 504, 'b': 2}\n[skip]"];
    25 [label="<a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 672, 'c': 504, 'b': 2}> --> {'a': 1344, 'c': 504, 'b': 1}\n[comp]"];
    26 [label="<a := BitShiftLeft(a, 1), {'a': 672, 'c': 504, 'b': 2}> --> {'a': 1344, 'c': 504, 'b': 2}\n[ass]"];
    27 [label="<b := BitShiftRight(b, 1), {'a': 1344, 'c': 504, 'b': 2}> --> {'a': 1344, 'c': 504, 'b': 1}\n[ass]"];
    28 [label="<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 1344, 'c': 504, 'b': 1}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_tt]"];
    29 [label="<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 1344, 'c': 504, 'b': 1}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[comp]"];
    30 [label="<if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip), {'a': 1344, 'c': 504, 'b': 1}> --> {'a': 1344, 'c': 1848, 'b': 1}\n[if_tt]"];
    31 [label="<c := Plus(c, a), {'a': 1344, 'c': 504, 'b': 1}> --> {'a': 1344, 'c': 1848, 'b': 1}\n[ass]"];
    32 [label="<a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1), {'a': 1344, 'c': 1848, 'b': 1}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[comp]"];
    33 [label="<a := BitShiftLeft(a, 1), {'a': 1344, 'c': 1848, 'b': 1}> --> {'a': 2688, 'c': 1848, 'b': 1}\n[ass]"];
    34 [label="<b := BitShiftRight(b, 1), {'a': 2688, 'c': 1848, 'b': 1}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[ass]"];
    35 [label="<while (Not(Eq(b, 0))) do (if (Not(Eq(BitAnd(b, 1), 0))) then (c := Plus(c, a)) else (skip) ; a := BitShiftLeft(a, 1) ; b := BitShiftRight(b, 1)), {'a': 2688, 'c': 1848, 'b': 0}> --> {'a': 2688, 'c': 1848, 'b': 0}\n[while_ff]"];

    2 -> 3;
    4 -> 5;
    4 -> 6;
    1 -> 2;
    1 -> 4;
    9 -> 10;
    11 -> 12;
    11 -> 13;
    8 -> 9;
    8 -> 11;
    16 -> 17;
    18 -> 19;
    18 -> 20;
    15 -> 16;
    15 -> 18;
    23 -> 24;
    25 -> 26;
    25 -> 27;
    22 -> 23;
    22 -> 25;
    30 -> 31;
    32 -> 33;
    32 -> 34;
    29 -> 30;
    29 -> 32;
    28 -> 29;
    28 -> 35;
    21 -> 22;
    21 -> 28;
    14 -> 15;
    14 -> 21;
    7 -> 8;
    7 -> 14;
    0 -> 1;
    0 -> 7;
}

